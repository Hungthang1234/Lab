{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyM3hQOGvQQchOUSfKZIRCV3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6SPspRMhFmfo"},"outputs":[],"source":["!pip install mpi4py"]},{"cell_type":"code","source":["!pip install --upgrade mpi4py"],"metadata":{"id":"W30u4MJGJLyO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%writefile lab7.py\n","from mpi4py import MPI\n","import numpy as np\n","\n","comm = MPI.COMM_WORLD\n","rank = comm.Get_rank()\n","\n","value = np.array(rank,'d')\n","\n","print('Rank :',rank, 'Value :' , value)\n","\n","value_sum = np.array(0.0,'d')\n","value_max = np.array(0.0,'d')\n","\n","comm.Reduce(value , value_sum , op =MPI.SUM , root = 0)\n","comm.Reduce(value , value_max , op =MPI.MAX , root = 0)\n","\n","if rank == 0 :\n","  print('Rank 0 value Sum :', value_sum)\n","  print('Rank 0 value Max :', value_max)"],"metadata":{"id":"chFqYLhIFpWu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["! mpirun --allow-run-as-root --oversubscribe -np 3 python lab7.py"],"metadata":{"id":"vil7RwtpGBQO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%writefile lab7.py\n","import numpy as np\n","from mpi4py import MPI\n","comm = MPI.COMM_WORLD\n","rank = MPI.COMM_WORLD.Get_rank()\n","\n","src = (np.arange(8) + rank*8).reshape(4,2)\n","dst = np.zeros_like(src)\n","\n","def myadd(xmem ,ymem , dt) :\n","  x = np.frombuffer(xmem , dtype = src.dtype)\n","  y = np.frombuffer(ymem , dtype = dst.dtype)\n","  z = x + y\n","\n","  print(\"Rank %d reducing %s(%s) and %s (%s), ylelding %s\" % (rank , x, type(x),y,type(y), z))\n","  y[:] = z\n","# op = MPI.op.Create(myadd, commute = True) # Incorrect :  mpi4py.MPI has no attribute 'op'\n","op = MPI.Op.Create(myadd, commute = True) # Correct : Use MPI.Op.Create to create a custom operation\n","MPI.COMM_WORLD.Reduce(src , dst , op)\n","\n","if MPI.COMM_WORLD.rank == 0:\n","  print(\"KET QUA= %s\"% dst)"],"metadata":{"id":"_xxk7rehGDmm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["! mpirun --allow-run-as-root --oversubscribe -np 3 python lab7.py"],"metadata":{"id":"nMDB82sAGFE_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%writefile lab7.py\n","from functools import reduce\n","\n","from mpi4py.futures import MPIPoolExecutor\n","\n","# Function to compute the product of two numbers\n","def product(x, y):\n","    return x * y\n","\n","# Function to compute the sum of two numbers\n","def sum(x, y):\n","    return x + y\n","\n","if __name__ == '__main__':\n","    # Define the two ranges\n","    a = range(1, 101)\n","    b = range(101, 201)\n","\n","    # Use the MPI Pool Executor to parallelize the computation of products\n","    with MPIPoolExecutor() as executor:\n","        result = executor.map(product, a, b)\n","\n","    # Use reduce to compute the total sum of the products\n","    total = reduce(sum, results)\n","\n","    # Print the final result\n","    print(\"Ket qua\", total)\n","\n"],"metadata":{"id":"Cfxkzej5Gfqv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["! mpirun --allow-run-as-root --oversubscribe -np 3 python lab7.py\n"],"metadata":{"id":"yY60YmdjGgtd"},"execution_count":null,"outputs":[]}]}